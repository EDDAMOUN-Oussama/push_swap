
VAR="212 369 221 498 170 552 589 521 486 82 494 438 298 577 107 203 63 499 528 149 21 465 402 309 489 432 257 451 445 175 50 17 100 329 573 134 189 426 485 497 121 294 19 598 380 215 139 92 148 227 44 146 423 488 315 264 308 416 279 461 403 192 385 393 442 102 242 399 559 224 586 323 318 22 296 64 373 76 352 250 46 222 462 592 25 3 137 295 355 75 338 263 283 7 523 232 161 466 570 533 371 193 88 524 594 512 502 375 476 366 180 414 226 518 272 12 517 459 398 151 487 287 345 285 595 370 544 557 144 463 478 516 78 179 319 475 239 441 553 126 584 510 270 359 477 593 111 116 519 491 585 39 504 61 305 357 372 335 501 349 235 112 539 452 59 56 117 200 456 471 596 422 252 217 482 277 474 347 364 229 547 525 132 360 202 282 413 346 271 395 207 280 29 560 258 548 389 358 153 155 382 185 159 195 379 554 417 65 143 597 136 177 118 448 468 241 415 73 386 546 243 37 362 231 98 51 351 433 401 361 69 405 378 428 562 353 565 79 408 165 167 581 113 532 150 292 57 31 206 443 168 427 299 230 536 142 6 99 33 289 120 290 171 157 322 220 367 342 237 450 187 135 93 458 58 412 2 74 569 267 368 198 169 1 481 219 53 437 572 265 152 104 312 300 534 356 262 95 316 321 23 201 119 24 125 564 260 381 332 509 339 333 496 183 269 503 211 479 32 556 447 561 472 108 540 411 45 421 275 254 162 128 434 467 94 97 407 313 123 326 354 236 535 60 54 376 563 473 470 62 96 327 377 213 404 435 520 85 431 238 530 505 330 600 172 506 526 436 363 307 324 480 543 555 176 317 141 284 551 47 558 396 9 87 164 469 52 208 86 14 10 464 549 529 493 344 34 303 583 580 406 571 131 249 394 186 449 35 490 453 424 196 255 588 550 188 579 311 410 182 83 71 133 457 246 301 160 268 68 216 522 204 154 13 599 328 18 306 281 138 341 538 251 101 0  387 158 66 225 388 16 444 348 191 566 247 41 390 27 15 384 507 156 425 513 184 291 531 276 537 5 320 383 286 199 115 197 574 30 545 259 325 293 343 446 392 304 590 11 67 245 43 391 233 166 205 266 500 114 84"
# VAR2="-846066229 1738551680 1563159573 -1290846648 1095528040 1253659843 735859734 -473639694 -1629888036 410416010 -1293248104 307320174 -1604453457 2126504021 1283349198 -591226724 -1755237559 -1573729905 88 1245277419 -1503063508 253093297 1948761185 2010701042 -1415412988 -1454119034 1406715780 33014755 -1467952215 1618185048 -1530970496 -66478112 1611736289 70330453 1005617882 -2126454064 1425872989 -1645680173 1530897343 -527235986 1489362357 1000652767 1166703405 1065745375 -890971776 1670133894 -551111748 -1387073477 -1459262245 572673989 -372108210 -1821029304 -1607073674 380898199 2117318813 346297550 1739237975 1061413449 -895296083 698052490 -825872047 1896632757 -2078689339 1412069814 -1179522123 346761277 1444532577 -776795235 1220432850 1162049892 -1426802681 -1087204402 336353420 -322712723 1138538471 1875079499 1047893403 2021193452 38743107 2024650701
# "

VAR2="90 95 78 72 50 10 40 26 18 36 34 44 83 19 24 32 46 42 17 81 71 89 60 73 55 93 47 82 88 52 99 92 68 41 63 100 57 61 48 80 96 66 2 59 49 69 7 74 85 1 70 35 8 53 86 64 25 30 75 28 45 43 37 94 54 39 21 27 76 65 3 33 51 31 29 62 6 87 98 15 84 14 9 22 77 11 16 23 97 79 67 12 58 91 5 56 4 38 20 13"
# VAR="325 275 172 270 434 41 151 496 243 106 181 240 234 94 120 200 223 473 387 287 486 39 206 445 317 54 272 224 321 405 46 4 6 454 73 138 164 78 264 103 479 205 260 145 490 380 76 38 441 436 351 91 350 125 43 337 77 19 201 12 295 157 444 440 100 352 72 207 310 447 170 227 268 456 132 471 131 462 174 64 176 386 5 226 383 418 452 231 495 493 476 446 344 289 204 148 316 102 171 256 472 121 24 188 152 30 137 455 52 136 25 282 460 241 162 90 314 319 68 340 457 410 250 415 488 283 180 254 425 178 323 149 298 57 42 115 238 339 1 259 304 463 252 326 288 114 421 239 478 147 416 451 427 161 195 184 338 358 60 362 92 140 377 237 335 485 141 402 197 376 55 278 14 371 221 225 266 228 79 419 468 70 299 23 146 45 165 247 431 193 482 154 111 284 353 10 185 305 182 61 437 432 218 320 484 160 258 315 119 74 210 329 391 142 59 499 271 155 214 109 308 404 459 393 487 399 285 32 494 40 261 464 217 126 156 273 374 409 294 334 13 422 168 277 355 429 8 22 86 328 475 412 356 208 341 87 354 169 212 408 233 235 417 368 336 458 179 469 153 194 307 244 481 118 144 113 175 406 360 448 110 199 269 81 297 191 69 346 461 403 236 134 343 345 303 359 213 97 442 177 3 395 449 483 433 330 216 474 467 88 36 384 279 491 50 248 56 424 95 9 71 98 203 281 34 342 255 363 124 82 2 167 127 313 16 133 407 385 322 397 31 262 183 211 49 143 192 381 85 99 80 21 107 116 361 18 48 453 20 51 190 104 105 242 219 367 492 215 65 332 318 500 83 375 253 370 300 96 186 411 489 28 309 35 276 331 158 480 324 246 389 312 364 379 101 209 293 466 33 291 196 301 498 302 430 66 130 26 414 347 220 89 122 394 357 189 123 135 311 7 11 497 369 249 435 372 84 398 27 29 292 438 378 420 265 263 443 47 267 53 75 396 245 232 62 37 93 306 327 67 401 150 333 15 187 222 388 400 366 426 274 251 63 286 159 230 392 413 229 173 428 280 198 470 58 348 477 117 163 439 390 296 44 290 450 349 108 129 128 17 373 465 166 382 423 202 139 257 112 365"

cc moves.c push_swap.c utils.c valide.c libft_push_swap/ft_atoi.c libft_push_swap/ft_isdigit.c libft_push_swap/ft_lstadd_back.c libft_push_swap/ft_lstadd_front.c libft_push_swap/ft_lstclear.c  libft_push_swap/ft_lstlast.c  libft_push_swap/ft_lstnew.c libft_push_swap/ft_lstsize.c libft_push_swap/ft_putstr_fd.c libft_push_swap/ft_split.c libft_push_swap/ft_strncmp.c -Wall -Wextra -Werror -o push_swap

# ./push_swap $VAR | pbcopy
# echo "----> 500 nbr:  "
# ./push_swap  $VAR | wc -l
# ./push_swap $VAR | ./checker_Mac $VAR
# echo "\n ----> 100 nbr:  "

# ./push_swap $VAR2 | wc -l
# ./push_swap $VAR2 | ./checker_Mac $VAR2
# ./checker_Mac $VAR

###########################################################################################################
#!/bin/bash
# تأكد من أن كل من push_swap و checker تم ترجمتهم وتشغيلهم في نفس المجلد

# قائمة بجميع التباديل الفريدة للمدخلات "1 2 3"

RED='\033[0;31m'
GREEN='\033[0;32m'
RESET='\033[0m'

inputs=(
    "1 2 3"
    "1 3 2"
    "2 1 3"
    "2 3 1"
    "3 1 2"
    "3 2 1"
)
cont=0

# لكل مجموعة مدخلات، نقوم بالتالي:
# 1. استدعاء برنامج push_swap وتمرير المدخلات.
# 2. التقاط الحركات الناتجة (إن وجدت).
# 3. تمرير المدخلات والحركات إلى برنامج checker للتأكد من أن الناتج مرتب بشكل صحيح.
echo "for 3 nmb:\n"
for input in "${inputs[@]}"; do
    echo "test: [$input]\n"
    
    # تشغيل push_swap على المدخل والحصول على الحركات
    ./push_swap $input
    
    N=$(./push_swap $input | wc -l | tr -d ' ' )
    echo "Operations count: $N"
    if [ "$N" -lt 4 ]; then
    echo "${GREEN}OK${RESET}"
    else
    echo  "${RED} \nERROR great than 3 ${RESET}"
   cont=$((cont + 1))
    fi
    # تشغيل checker مع الحركات على المدخل الأصلي
    result=$(./push_swap $input | ./checker_Mac $input)
     if [ "$result" != "OK" ]; then
    echo  "${RED} \nERROR in the checker_Mac ${RESET}"
   cont=$((cont + 1))
    else
    echo "the result: $result \n"
    fi
    echo "-----------------------"
done

inputs=(
    "1 2 3 4"
    "1 2 4 3"
    "1 3 2 4"
    "1 3 4 2"
    "1 4 2 3"
    "1 4 3 2"
    "2 1 3 4"
    "2 1 4 3"
    "2 3 1 4"
    "2 3 4 1"
    "2 4 1 3"
    "2 4 3 1"
    "3 1 2 4"
    "3 1 4 2"
    "3 2 1 4"
    "3 2 4 1"
    "3 4 1 2"
    "3 4 2 1"
    "4 1 2 3"
    "4 1 3 2"
    "4 2 1 3"
    "4 2 3 1"
    "4 3 1 2"
    "4 3 2 1"

)

echo "for 4 nmb:\n"
for input in "${inputs[@]}"; do
    echo "test: [$input]\n"
    
    # تشغيل push_swap على المدخل والحصول على الحركات
    ./push_swap $input
    
    N=$(./push_swap $input | wc -l | tr -d ' ' )
    echo "Operations count: $N"
    if [ "$N" -lt 13 ]; then
    echo "${GREEN}OK${RESET}"
    else
    echo  "${RED} \nERROR great than 13 ${RESET}"
   cont=$((cont + 1))
    fi
    # تشغيل checker مع الحركات على المدخل الأصلي
    result=$(./push_swap $input | ./checker_Mac $input)
     if [ "$result" != "OK" ]; then
    echo  "${RED} \nERROR in the checker_Mac ${RESET}"
   cont=$((cont + 1))
    else
    echo "the result: $result \n"
    fi
    echo "-----------------------"
done


inputs=(
    "1 2 3 4 5"
    "1 2 3 5 4"
    "1 2 4 3 5"
    "1 2 4 5 3"
    "1 2 5 3 4"
    "1 2 5 4 3"
    "1 3 2 4 5"
    "1 3 2 5 4"
    "1 3 4 2 5"
    "1 3 4 5 2"
    "1 3 5 2 4"
    "1 3 5 4 2"
    "1 4 2 3 5"
    "1 4 2 5 3"
    "1 4 3 2 5"
    "1 4 3 5 2"
    "1 4 5 2 3"
    "1 4 5 3 2"
    "1 5 2 3 4"
    "1 5 2 4 3"
    "1 5 3 2 4"
    "1 5 3 4 2"
    "1 5 4 2 3"
    "1 5 4 3 2"
    "2 1 3 4 5"
    "2 1 3 5 4"
    "2 1 4 3 5"
    "2 1 4 5 3"
    "2 1 5 3 4"
    "2 1 5 4 3"
    "2 3 1 4 5"
    "2 3 1 5 4"
    "2 3 4 1 5"
    "2 3 4 5 1"
    "2 3 5 1 4"
    "2 3 5 4 1"
    "2 4 1 3 5"
    "2 4 1 5 3"
    "2 4 3 1 5"
    "2 4 3 5 1"
    "2 4 5 1 3"
    "2 4 5 3 1"
    "2 5 1 3 4"
    "2 5 1 4 3"
    "2 5 3 1 4"
    "2 5 3 4 1"
    "2 5 4 1 3"
    "2 5 4 3 1"
    "3 1 2 4 5"
    "3 1 2 5 4"
    "3 1 4 2 5"
    "3 1 4 5 2"
    "3 1 5 2 4"
    "3 1 5 4 2"
    "3 2 1 4 5"
    "3 2 1 5 4"
    "3 2 4 1 5"
    "3 2 4 5 1"
    "3 2 5 1 4"
    "3 2 5 4 1"
    "3 4 1 2 5"
    "3 4 1 5 2"
    "3 4 2 1 5"
    "3 4 2 5 1"
    "3 4 5 1 2"
    "3 4 5 2 1"
    "3 5 1 2 4"
    "3 5 1 4 2"
    "3 5 2 1 4"
    "3 5 2 4 1"
    "3 5 4 1 2"
    "3 5 4 2 1"
    "4 1 2 3 5"
    "4 1 2 5 3"
    "4 1 3 2 5"
    "4 1 3 5 2"
    "4 1 5 2 3"
    "4 1 5 3 2"
    "4 2 1 3 5"
    "4 2 1 5 3"
    "4 2 3 1 5"
    "4 2 3 5 1"
    "4 2 5 1 3"
    "4 2 5 3 1"
    "4 3 1 2 5"
    "4 3 1 5 2"
    "4 3 2 1 5"
    "4 3 2 5 1"
    "4 3 5 1 2"
    "4 3 5 2 1"
    "4 5 1 2 3"
    "4 5 1 3 2"
    "4 5 2 1 3"
    "4 5 2 3 1"
    "4 5 3 1 2"
    "4 5 3 2 1"
    "5 1 2 3 4"
    "5 1 2 4 3"
    "5 1 3 2 4"
    "5 1 3 4 2"
    "5 1 4 2 3"
    "5 1 4 3 2"
    "5 2 1 3 4"
    "5 2 1 4 3"
    "5 2 3 1 4"
    "5 2 3 4 1"
    "5 2 4 1 3"
    "5 2 4 3 1"
    "5 3 1 2 4"
    "5 3 1 4 2"
    "5 3 2 1 4"
    "5 3 2 4 1"
    "5 3 4 1 2"
    "5 3 4 2 1"
    "5 4 1 2 3"
    "5 4 1 3 2"
    "5 4 2 1 3"
    "5 4 2 3 1"
    "5 4 3 1 2"
    "5 4 3 2 1"

)
echo "for 5 nmb:\n"
for input in "${inputs[@]}"; do
    echo "test: [$input]\n"
    
    # تشغيل push_swap على المدخل والحصول على الحركات
    ./push_swap $input
    N=$(./push_swap $input | wc -l | tr -d ' ' )
    echo "Operations count: $N"
    if [ "$N" -lt 13 ]; then
    echo "${GREEN}OK${RESET}"
    else
    echo  "${RED} \nERROR great than 12 ${RESET}"
   cont=$((cont + 1))
    fi
    # تشغيل checker مع الحركات على المدخل الأصلي
    result=$(./push_swap $input | ./checker_Mac $input)
    if [ "$result" != "OK" ]; then
    echo  "${RED} \nERROR in the checker_Mac ${RESET}"
   cont=$((cont + 1))
    else
    echo "the result: $result \n"
    fi
    echo "-----------------------"
done
    if [ "$cont" -eq 0 ]; then
    echo "${GREEN}SUCCSSES\n${RESET}"
    else
    echo "${RED}the Errors $cont/120\n${RESET}"
    fi
###########################################################################################################


# echo "test arg:\n"
# ./push_swap 1 35  56 3 - #error
# ./push_swap 1 35  56 3 "-"4
# ./push_swap 1 35  56 3 0000000000000000000000005 
# ./push_swap 1 35  56 3 0000000000000100000000000000000000 #error
# ./push_swap  578 54 8 4 5 87  4 45 2 #error
# ./push_swap  578 54 8 4 5 87  + 45 2 #error



# ////////////////// ./push_swap -3 "3 5"  10 - 